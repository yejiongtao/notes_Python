#Pong.py
#这种比较复杂的程序，先实现核心功能，再把其他的加上
    import pygame,sys

    class MyBallCLass(pygame.sprite.Sprite):
        def __init__(self,image_file,speed,location):
            pygame.sprite.Sprite.__init__(self)
            self.image=pygame.image.load(image_file)     #每个小精灵都要有image，rect
            self.rect=self.image.get_rect()
            self.rect.left,self.rect.top=location
            self.speed=speed

        def move(self):
            global points,score_text                    #要改变全局变量
            self.rect=self.rect.move(self.speed)
            if self.rect.left<0 or self.rect.right>screen.get_width():
                self.speed[0]=-self.speed[0]
            if self.rect.top<=0:
                self.speed[1]=-self.speed[1]
                points+=1
                score_text=font.render(str(points),1,[0,0,0])

    class MyPaddleClass(pygame.sprite.Sprite):
        def __init__(self,location=[0,0]):                  #默认参数
            pygame.sprite.Sprite.__init__(self)
            image_surface=pygame.surface.Surface([100,20])  #产生一个平面，记住这个方法！！
            image_surface.fill([0,0,0])
            self.image=image_surface.convert()              #小精灵要有image，所以把平面转换过来
            self.rect=self.image.get_rect()
            self.rect.left,self.rect.top=location

    pygame.init()
    screen=pygame.display.set_mode([640,480])
    clock=pygame.time.Clock()
    myBall=MyBallCLass('Dragon_Ball.png',[10,5],[50,50])
    ballGroup=pygame.sprite.Group(myBall)                   #就算只有一个也要创建组，为了判断碰撞
    myPaddle=MyPaddleClass([270,400])
    lives=3
    points=0

    font=pygame.font.Font(None,50)                          #字体
    score_text=font.render(str(points),1,[0,0,0])           #记住！
    textpos=[10,10]
    done=False      #记录游戏是否结束

    while True:
        clock.tick(30)
        screen.fill([255,255,255])
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                sys.exit()
            elif event.type==pygame.MOUSEMOTION:
                myPaddle.rect.centerx=event.pos[0]

        if pygame.sprite.spritecollide(myPaddle,ballGroup,False):
            myBall.speed[1]=-myBall.speed[1]
        myBall.move()

        if not done:
            screen.blit(myBall.image,myBall.rect)
            screen.blit(myPaddle.image,myPaddle.rect)
            screen.blit(score_text,textpos)
            for i in range(lives):
                width=screen.get_width()
                screen.blit(myBall.image,[width-40*i,20])
            pygame.display.flip()

        if myBall.rect.top>=screen.get_height():
            lives-=1
            if lives==0:
                final_text1='Game Over'
                final_text2='Your final score is: '+str(points)
                ft1_font=pygame.font.Font(None,70)
                ft1_surface=font.render(final_text1,1,[0,0,0])
                ft2_font=pygame.font.Font(None,50)
                ft2_surface=font.render(final_text2,1,[0,0,0])
                screen.blit(ft1_surface,[screen.get_width()/2-ft1_surface.get_width()/2,100])
                screen.blit(ft2_surface,[screen.get_width()/2-ft2_surface.get_width()/2,200])
                pygame.display.flip()
                done=True
            else:
                pygame.time.delay(2000)
                myBall.rect.topleft=[50,50]

一般来说，时钟周期越短则动画越连续
