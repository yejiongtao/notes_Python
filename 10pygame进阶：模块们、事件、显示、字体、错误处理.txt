pygame是基于SDL（simple directmedia layer），所以一次只能同时有一个窗口，而且像qt、PythonCard这样的图形库有自己的事件循环，pygame也要有，所以并不能同时使用。要想在pygame中加入gui，要用一些专门的库。

pygame更致力于2D游戏的开发

1.pygame的模块们！！！！好牛掰！！！
    pygame.cdrom	访问光驱
    pygame.cursors	加载光标
    pygame.display	访问显示设备
    pygame.draw	    绘制形状、线和点
    pygame.event	管理事件
    pygame.font	    使用字体
    pygame.image	加载和存储图片
    pygame.joystick	使用游戏手柄或者 类似的东西
    pygame.key	    读取键盘按键
    pygame.mixer	声音
    pygame.mouse	鼠标
    pygame.movie	播放视频
    pygame.music	播放音频
    pygame.overlay	访问高级视频叠加
    pygame	        就是我们在学的这个东西了……
    pygame.rect	    管理矩形区域
    pygame.sndarray	操作声音数据
    pygame.sprite	操作移动图像
    pygame.surface	管理图像和屏幕
    pygame.surfarray	管理点阵图像数据
    pygame.time	        管理时间和帧信息
    pygame.transform	缩放和移动图像

2.
    screen = pygame.display.set_mode([640,480],0,32)
        #返回一个Surface对象，参数分别是分辨率、标志位（默认为0）、色深
        #标志位们：
            FULLSCREEN	创建一个全屏窗口
            DOUBLEBUF	创建一个“双缓冲”窗口，建议在HWSURFACE或者OPENGL时使用
            HWSURFACE	创建一个硬件加速的窗口，必须和FULLSCREEN同时使用，就是把surface放在显存里，速度会变快！
            OPENGL	    创建一个OPENGL渲染的窗口，用了之后pygame中的2D图像函数就不能用了
            RESIZABLE	创建一个可以改变大小的窗口
            NOFRAME	    创建一个没有边框的窗口
    pygame.display.set_caption("Hello, World!")

    background = pygame.image.load(background_image_filename).convert()
    mouse_cursor = pygame.image.load(mouse_image_filename).convert_alpha()
        #convert是把图片转化成Surface对象，是必须的！
        #convert_alpha保留了alpha通道的信息
    
    screen.blit(mouse_cursor, (x, y))
        #把光标画上去
    pygame.display.update()
        #刷新画面

    x, y = pygame.mouse.get_pos()
        #mouse模块首秀
        #也可以用事件来获得鼠标位置

3.关于事件
    from pygame.locals import *
        获得一些常量
        就可以 if event.type==QUIT: 不用pygame.QUIT了
        KEYDOWN 什么的也都可以直接用了

    pygame中把事件都放在事件队列里面，逐一处理
        pygame.event.get() 一次获得队列中的所有事件。
        pygame.event.wait() 等到发生一个事件才继续下去，不常用
        pygame.event.poll() 会根据现在的情形返回一个真实的事件，或者一个“什么都没有”。
    事件们：
        QUIT	        用户按下关闭按钮	    none（没有参数）
        ATIVEEVENT	    Pygame被激活或者隐藏	gain, state
        KEYDOWN	        键盘被按下	            unicode, key, mod （mod包含了组合键信息，
                                                                  （如果 mod & KMOD_CTRL是真的话，表示用户同时按下了Ctrl键。
                                                                  （类似的还有KMOD_SHIFT，KMOD_ALT。
                                                                  （注意要用 mod 去与那个常量！
                                                                  （key的值是这种格式：K_a K_SPACE K_RETURN K_LEFT
                                                                  （unicode不常用，先不讲
        KEYUP	        键盘被放开	            key, mod
        MOUSEMOTION	    鼠标移动	            pos, rel, buttons （buttons是一个元组，三个值分别代表左中右三键）
                                                                  （1就是按下，0未按下，可以来区别鼠标移动与拖动）
                                                                  （rel代表了距离上次产生鼠标事件的位置差）
        MOUSEBUTTONDOWN	鼠标按下	            pos, button       （button代表哪个键被按下）
        MOUSEBUTTONUP	鼠标放开	            pos, button
        JOYAXISMOTION	游戏手柄(Joystick or pad)移动	joy, axis, value
        JOYBALLMOTION	游戏球(Joy ball)?移动	joy, axis, value
        JOYHATMOTION	游戏手柄(Joystick)?移动	joy, axis, value
        JOYBUTTONDOWN	游戏手柄按下	        joy, button
        JOYBUTTONUP	    游戏手柄放开	        joy, button
        VIDEORESIZE	    Pygame窗口缩放	        size, w, h
        VIDEOEXPOSE	    Pygame窗口部分公开(expose)?	none
        USEREVENT	    触发了一个用户事件	    code

    键盘事件的例子：
        if event.type==KEYDOWN:
            if event.key==K_a:

    事件过滤：
        pygame.event.set_blocked(KEYDOWN)
        pygame.event.set_blocked([KEYDOWN,KEYUP])
            block掉不需要的事件类型
        pygame.event.set_allowed(MOUSEMOTION)
            只允许需要处理的事件类型
    自定义事件：
            my_event = pygame.event.Event(KEYDOWN, key=K_SPACE, mod=0, unicode=u' ')
                自己定义一个KEYDOWN类型的事件
            CATONKEYBOARD = USEREVENT+1
            my_event = pygame.event.Event(CATONKEYBOARD, message="Bad cat!")
                或者定义一个全新的事件，后面有什么参数都是自己定的
        然后在适当的时候抛出事件：
            pygame.event.post(my_event)
        处理事件:
            if event.type==CATONKEYBOARD:

4.关于显示：
    pygame.display.list_modes()
        获得当前机器支持的显示模式，是一些分辨率，从高到低。
    可以在程序的过程中通过set_mode 改变分辨率。
        tips:改变一个bool的值，只要对自身not
        if event.type==KEYDOWN:
            if event.key==K_f:
                fullScreen=not fullScreen
                if fullScreen:
                    pygame.display.set_mode([1366,768],FULLSCREEN)
                else:
                    pygame.display.set_mode([640,480])
    RESIZABLE模式：
        if event.type == VIDEORESIZE:
            SCREEN_SIZE = event.size            #这个事件有size，w，h
            screen = pygame.display.set_mode(SCREEN_SIZE, RESIZABLE, 32)

5.字体模块
    创建一个Font对象：
        my_font = pygame.font.SysFont('arial',16)
            使用某种系统字体，pygame.font.get_fonts()可以获得可用的系统字体
        my_font = pygame.font.Font('my_font.ttf',16)
            用ttf文件创建字体，好处是把ttf随着游戏一起发布，就不用担心用户系统中有什么字体了
    用render方法写字：
        text_surface = my_font.render("Hello",True,[0,0,0],[255,255,255])
            参数分别是：内容，是否开启抗锯齿，文字颜色，背景色（不设置则是透明）
    用blit显示，或者image.save存为图片
        pygame.image.save(name_surface, "name.png")

    怎么显示中文：
        文档第一行加上magic comment：
            # -*- coding: utf-8 -*-         必须与保存文件的编码一致
        用utf-8保存字符串：
            s= u'你好'
        两种方式把一般的字符串转化成utf-8:
            s = unicode(s,'utf-8')
            s = s.decode('utf-8')
        注意：要用可以显示中文的字体才行，比如'stsong'宋体。

6.错误处理：
    try:
        ..
    except pygame.error, e:
        print e


